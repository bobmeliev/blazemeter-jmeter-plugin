Index: src/main/java/com/blazemeter/jmeter/testexecutor/TestPanelGui.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/blazemeter/jmeter/testexecutor/TestPanelGui.java	(revision bca76be5ac5829d3a668810891736d61deed035d)
+++ src/main/java/com/blazemeter/jmeter/testexecutor/TestPanelGui.java	(revision )
@@ -122,43 +122,7 @@
             }
         });
 
-        BmTestManager.getInstance().testUserKeyNotificationListeners.add(new BmTestManager.TestUserKeyNotification() {
-            @Override
-            public void onTestUserKeyChanged(String userKey) {
-                setUserKey(userKey);
-                signUpToBlazemeterButton.setEnabled(userKey == null || userKey.isEmpty());
-            }
-        });
 
-
-        BmTestManager.getInstance().userInfoChangedNotificationListeners.add(new BmTestManager.UserInfoChanged() {
-            @Override
-            public void onUserInfoChanged(UserInfo userInfo) {
-                if (userInfo == null) {
-                    userInfoLabel.setText("");
-                    clearTestInfo();
-                } else {
-                    if (userInfo.getMaxUsersLimit() > 8400 && userInfo.getMaxEnginesLimit() > 14) {
-                        userInfo.setMaxUsersLimit(8400);
-                        userInfo.setMaxEnginesLimit(14);
-                    }
-                    //configure numberOfUserSlider depending on UserInfo
-                    numberOfUsersSlider.setMinimum(0);
-                    userInfoLabel.setText(userInfo.toString());
-                    numberOfUsersSlider.setMaximum(userInfo.getMaxUsersLimit());
-                    numberOfUsersSlider.setMajorTickSpacing(userInfo.getMaxUsersLimit() / 4);
-                    numberOfUsersSlider.setMinorTickSpacing(userInfo.getMaxUsersLimit() / 12);
-                    Dictionary labels = numberOfUsersSlider.createStandardLabels(numberOfUsersSlider.getMajorTickSpacing());
-                    numberOfUsersSlider.setLabelTable(labels);
-                }
-            }
-        });
-
-        signUpToBlazemeterButton.setEnabled(BmTestManager.getInstance().getUserKey() == null || BmTestManager.
-                getInstance().
-                getUserKey().
-                isEmpty());
-
         goToTestPageButton.addActionListener(new ActionListener() {
             @Override
             public void actionPerformed(ActionEvent actionEvent) {
@@ -309,33 +273,7 @@
         iterationsSpinner.setModel(new SpinnerNumberModel(0, 0, 1010, 1));
         durationSpinner.setModel(new SpinnerNumberModel(0, 0, 480, 60));
 
-        final BmTestManager.RunModeChanged runModeChanged = new BmTestManager.RunModeChanged() {
-            @Override
-            public void onRunModeChanged(boolean isLocalRunMode) {
-                runLocal.setSelected(isLocalRunMode);
-                runRemote.setSelected(!isLocalRunMode);
-                runModeChanged(isLocalRunMode);
 
-            }
-        };
-        BmTestManager.getInstance().runModeChangedNotificationListeners.add(runModeChanged);
-
-        ActionListener listener = new ActionListener() {
-            @Override
-            public void actionPerformed(ActionEvent e) {
-                BmTestManager bmTestManager = BmTestManager.getInstance();
-                bmTestManager.setIsLocalRunMode(e.getActionCommand().equals("Locally (Reporting Only)"));
-                boolean isLocalRunMode = bmTestManager.getIsLocalRunMode();
-                runModeChanged.onRunModeChanged(isLocalRunMode);
-                BmLog.console(e.getActionCommand());
-
-            }
-        };
-
-        runLocal.addActionListener(listener);
-        runRemote.addActionListener(listener);
-
-
         addFilesButton.addActionListener(new ActionListener() {
             @Override
             public void actionPerformed(ActionEvent actionEvent) {
@@ -501,6 +439,72 @@
 
         if (!areListenersInitialized) {
             areListenersInitialized = true;
+
+
+            final BmTestManager.RunModeChanged runModeChanged = new BmTestManager.RunModeChanged() {
+                @Override
+                public void onRunModeChanged(boolean isLocalRunMode) {
+                    runLocal.setSelected(isLocalRunMode);
+                    runRemote.setSelected(!isLocalRunMode);
+                    runModeChanged(isLocalRunMode);
+
+                }
+            };
+            BmTestManager.getInstance().runModeChangedNotificationListeners.add(runModeChanged);
+
+            ActionListener listener = new ActionListener() {
+                @Override
+                public void actionPerformed(ActionEvent e) {
+                    BmTestManager bmTestManager = BmTestManager.getInstance();
+                    bmTestManager.setIsLocalRunMode(e.getActionCommand().equals("Locally (Reporting Only)"));
+                    boolean isLocalRunMode = bmTestManager.getIsLocalRunMode();
+                    runModeChanged.onRunModeChanged(isLocalRunMode);
+                    BmLog.console(e.getActionCommand());
+
+                }
+            };
+
+            runLocal.addActionListener(listener);
+            runRemote.addActionListener(listener);
+
+
+            signUpToBlazemeterButton.setEnabled(BmTestManager.getInstance().getUserKey() == null || BmTestManager.
+                    getInstance().
+                    getUserKey().
+                    isEmpty());
+
+            BmTestManager.getInstance().userInfoChangedNotificationListeners.add(new BmTestManager.UserInfoChanged() {
+                @Override
+                public void onUserInfoChanged(UserInfo userInfo) {
+                    if (userInfo == null) {
+                        userInfoLabel.setText("");
+                        clearTestInfo();
+                    } else {
+                        if (userInfo.getMaxUsersLimit() > 8400 && userInfo.getMaxEnginesLimit() > 14) {
+                            userInfo.setMaxUsersLimit(8400);
+                            userInfo.setMaxEnginesLimit(14);
+                        }
+                        //configure numberOfUserSlider depending on UserInfo
+                        numberOfUsersSlider.setMinimum(0);
+                        userInfoLabel.setText(userInfo.toString());
+                        numberOfUsersSlider.setMaximum(userInfo.getMaxUsersLimit());
+                        numberOfUsersSlider.setMajorTickSpacing(userInfo.getMaxUsersLimit() / 4);
+                        numberOfUsersSlider.setMinorTickSpacing(userInfo.getMaxUsersLimit() / 12);
+                        Dictionary labels = numberOfUsersSlider.createStandardLabels(numberOfUsersSlider.getMajorTickSpacing());
+                        numberOfUsersSlider.setLabelTable(labels);
+                    }
+                }
+            });
+
+
+            BmTestManager.getInstance().testUserKeyNotificationListeners.add(new BmTestManager.TestUserKeyNotification() {
+                @Override
+                public void onTestUserKeyChanged(String userKey) {
+                    setUserKey(userKey);
+                    signUpToBlazemeterButton.setEnabled(userKey == null || userKey.isEmpty());
+                }
+            });
+
             testIdComboBox.addItemListener(new ItemListener() {
                 @Override
                 public void itemStateChanged(ItemEvent itemEvent) {
@@ -579,6 +583,8 @@
                     }
                 }).start();
             } else {
+                String userKey = BmTestManager.getInstance().getUserKey();
+                userKeyTextField.setText(userKey);
                 userKeyTextField.addFocusListener(new FocusListener() {
                     String oldVal = "";
 
@@ -817,9 +823,9 @@
                 }
                 runInTheCloud.setActionCommand(testInfo.status == TestStatus.Running ? "stop" : "start");
                 runInTheCloud.setText(testInfo.status == TestStatus.Running ? "Stop" : "Run in the Cloud!");
-            } else {
+            }/* else {
                 infoLabel.setText(testIdComboBox.getSelectedItem().equals(NEW) ? SELECT_TEST : CAN_NOT_BE_RUN);
-            }
+            }*/
 
 
         }
Index: src/main/java/com/blazemeter/jmeter/testexecutor/RemoteTestRunnerGui.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/blazemeter/jmeter/testexecutor/RemoteTestRunnerGui.java	(revision bca76be5ac5829d3a668810891736d61deed035d)
+++ src/main/java/com/blazemeter/jmeter/testexecutor/RemoteTestRunnerGui.java	(revision )
@@ -101,11 +101,13 @@
             return;
         }
         super.configure(element);
+        BmTestManager bmTestManager = BmTestManager.getInstance();
+        RemoteTestRunner remoteTestRunner = (RemoteTestRunner) element;
+        bmTestManager.setUserKey(remoteTestRunner.getUserKey());
         //initialize listeners on TestPanelGui
         gui.initListeners();
         //initialize RemoteTestRunnerGUI
         initListeners();
-        BmTestManager bmTestManager = BmTestManager.getInstance();
 
         bmTestManager.getInstance().checkForUpdates();
         //Get TestInfo from BmTestManager;
Index: src/main/java/com/blazemeter/jmeter/testexecutor/BmTestManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/blazemeter/jmeter/testexecutor/BmTestManager.java	(revision bca76be5ac5829d3a668810891736d61deed035d)
+++ src/main/java/com/blazemeter/jmeter/testexecutor/BmTestManager.java	(revision )
@@ -183,7 +183,7 @@
     }
 
     public boolean isUserKeyFromProp() {
-        return this.propUserKey != null && !this.propUserKey.isEmpty();
+        return userKey.isEmpty() ? this.propUserKey != null && !this.propUserKey.isEmpty() : false;
     }
 
 
@@ -269,9 +269,10 @@
     }
 
     public void setUserKey(String userKey) {
+       /*
         if (isUserKeyFromProp())
             return;
-
+*/
         if (this.userKey == null || !this.userKey.equals(userKey)) {
             this.userKey = userKey;
             NotifyUserKeyChanged();
