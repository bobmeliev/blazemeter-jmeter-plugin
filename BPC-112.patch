Index: src/main/java/com/blazemeter/jmeter/testexecutor/TestPanelGui.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/blazemeter/jmeter/testexecutor/TestPanelGui.java	(revision fe1b54c3ade1fca853a40e5a3a2fbcd7d5a405f9)
+++ src/main/java/com/blazemeter/jmeter/testexecutor/TestPanelGui.java	(revision )
@@ -637,28 +637,34 @@
 
 //                    setTestInfo(testInfo);
                     updateTestInfo();
-                    if ((testInfo != null) & (testInfo.name != NEW) & (!testInfo.name.isEmpty()) &
+                /*    if ((testInfo != null) & (testInfo.name != NEW) & (!testInfo.name.isEmpty()) &
                             (testInfoChecker == null || testInfoChecker.isInterrupted())) {
                         startTestInfoChecker();
                     }
                     if (testInfo.name.equals(NEW)) {
                         stopTestInfoChecker();
                     }
-
+*/
-                    /*
+                   /*
                       New TestInfoChecking mechanism
+
+                   */
                     TestInfoChecker tiChecker = TestInfoChecker.getTestInfoChecker();
-                    if ((testInfo != null) & (testInfo.name != NEW) & (!testInfo.name.isEmpty()) &
-                            (tiChecker == null || tiChecker.isInterrupted())) {
+                    if ((testInfo.name != NEW) & (!testInfo.name.isEmpty())) {
 
+                        if (!tiChecker.isInterrupted() & tiChecker.isAlive()) {
+                            tiChecker.interrupt();
+                            tiChecker = null;
+                            tiChecker = TestInfoChecker.getTestInfoChecker();
+                        }
                         tiChecker.setTestId(testInfo.id);
                         tiChecker.start();
+
                     }
-                    if (testInfo.name == NEW || (testInfo.name.isEmpty())) {
-                        tiChecker.stopChecker();
+                    if (testInfo.name.equals(NEW)) {
+                        TestInfoChecker.stopChecker();
                     }
 
-                     */
 
                 }
             });
Index: src/main/java/com/blazemeter/jmeter/testexecutor/TestInfoChecker.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/blazemeter/jmeter/testexecutor/TestInfoChecker.java	(revision fe1b54c3ade1fca853a40e5a3a2fbcd7d5a405f9)
+++ src/main/java/com/blazemeter/jmeter/testexecutor/TestInfoChecker.java	(revision )
@@ -18,10 +18,11 @@
     private static TestInfoChecker testInfoChecker = null;
 
 
-    private TestInfoChecker() {
+    public TestInfoChecker() {
         this.testId = null;
     }
 
+
     public static TestInfoChecker getTestInfoChecker() {
         if (testInfoChecker == null) {
             testInfoChecker = new TestInfoChecker();
@@ -40,39 +41,34 @@
     @Override
     public void run() {
         BmTestManager bmTestManager = BmTestManager.getInstance();
-        while (!Thread.currentThread().isInterrupted()) {
-            if (Thread.currentThread().isInterrupted()) {
-                return;
+        while (!isInterrupted()) {
+            try {
+                if (isInterrupted()) {
+                    throw new InterruptedException();
-            }
+                }
 
-            TestInfo testInfo = BlazemeterApi.getInstance().getTestRunStatus(bmTestManager.getUserKey(),
-                    this.testId, true);
-            bmTestManager.setTestInfo(testInfo);
+                TestInfo testInfo = BlazemeterApi.getInstance().getTestRunStatus(bmTestManager.getUserKey(),
+                        this.testId, true);
+                bmTestManager.setTestInfo(testInfo);
 
-            try {
                 Thread.sleep(this.updateInterval);
             } catch (InterruptedException e) {
                 BmLog.debug("TestInfoChecker was interrupted during sleeping");
                 return;
             } finally {
-                if (Thread.currentThread().isInterrupted()) {
+                if (isInterrupted()) {
                     return;
                 }
             }
         }
-        if (Thread.currentThread().isInterrupted()) {
+        if (isInterrupted()) {
             return;
         }
     }
 
-    public void stopChecker() {
-        if (testInfoChecker != null) {
-            if (testInfoChecker.isAlive()) {
+    public static void stopChecker() {
-                testInfoChecker.interrupt();
+        testInfoChecker.interrupt();
-                testInfoChecker = null;
-                System.gc();
+//        Thread.currentThread().interrupt();
-                BmLog.debug("TestInfoChecker is interrupted!");
+        BmLog.debug("TestInfoChecker is interrupted!");
-            }
-        }
     }
 }
